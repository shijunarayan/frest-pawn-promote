"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const withTenantContext_1 = require("@/services/utils/withTenantContext");
const withCapability_1 = require("@/services/utils/withCapability");
const capabilities_1 = require("@/services/access-control/constants/capabilities");
const response_1 = require("@/services/auth-service/response");
const client_cognito_identity_provider_1 = require("@aws-sdk/client-cognito-identity-provider");
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const dynamodb_1 = require("@/services/utils/dynamodb");
const cognito = new client_cognito_identity_provider_1.CognitoIdentityProviderClient({});
exports.handler = (0, withTenantContext_1.withTenantContext)((0, withCapability_1.withCapability)(capabilities_1.Capabilities.MANAGE_USERS, async (event, { tenantId }) => {
    const body = JSON.parse(event.body || "{}");
    const { username, email, phone, password, requirePasswordReset = true, sendInvite = false, roles, } = body;
    if (!username) {
        return (0, response_1.errorResponse)("Missing required field: username", 400);
    }
    if (!sendInvite && !password) {
        return (0, response_1.errorResponse)("Password is required when not sending invite", 400);
    }
    const USER_POOL_ID = process.env.USER_POOL_ID;
    const userAttributes = [
        { Name: "custom:tenantId", Value: tenantId },
        email && { Name: "email", Value: email },
        phone && { Name: "phone_number", Value: phone },
        { Name: "preferred_username", Value: username },
    ].filter(Boolean);
    const createCommand = new client_cognito_identity_provider_1.AdminCreateUserCommand({
        UserPoolId: USER_POOL_ID,
        Username: username,
        UserAttributes: userAttributes,
        TemporaryPassword: password,
        MessageAction: sendInvite ? undefined : "SUPPRESS",
    });
    await cognito.send(createCommand);
    if (!sendInvite) {
        await cognito.send(new client_cognito_identity_provider_1.AdminSetUserPasswordCommand({
            UserPoolId: USER_POOL_ID,
            Username: username,
            Password: password,
            Permanent: !requirePasswordReset,
        }));
    }
    // 2. Get userId (Cognito sub)
    const getUserCommand = new client_cognito_identity_provider_1.AdminGetUserCommand({
        UserPoolId: USER_POOL_ID,
        Username: username,
    });
    const { UserAttributes } = await cognito.send(getUserCommand);
    const userId = UserAttributes?.find((attr) => attr.Name === "sub")?.Value;
    if (!userId) {
        return (0, response_1.errorResponse)("Failed to retrieve Cognito userId (sub)", 500);
    }
    for (const roleId of roles) {
        await dynamodb_1.client.send(new lib_dynamodb_1.PutCommand({
            TableName: process.env.USER_ROLES_TABLE,
            Item: {
                tenantId,
                userId: userId,
                roleId,
            },
        }));
    }
    return (0, response_1.successResponse)({ message: "User registered successfully." });
}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZWdpc3Rlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwRUFBdUU7QUFDdkUsb0VBQWlFO0FBQ2pFLG1GQUFnRjtBQUNoRiwrREFHMEM7QUFDMUMsZ0dBS21EO0FBRW5ELHdEQUFtRDtBQUNuRCx3REFBbUQ7QUFFbkQsTUFBTSxPQUFPLEdBQUcsSUFBSSxnRUFBNkIsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUV6QyxRQUFBLE9BQU8sR0FBRyxJQUFBLHFDQUFpQixFQUN0QyxJQUFBLCtCQUFjLEVBQUMsMkJBQVksQ0FBQyxZQUFZLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUU7SUFDdEUsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBb0IsQ0FBQztJQUMvRCxNQUFNLEVBQ0osUUFBUSxFQUNSLEtBQUssRUFDTCxLQUFLLEVBQ0wsUUFBUSxFQUNSLG9CQUFvQixHQUFHLElBQUksRUFDM0IsVUFBVSxHQUFHLEtBQUssRUFDbEIsS0FBSyxHQUNOLEdBQUcsSUFBSSxDQUFDO0lBRVQsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2QsT0FBTyxJQUFBLHdCQUFhLEVBQUMsa0NBQWtDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVELElBQUksQ0FBQyxVQUFVLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM3QixPQUFPLElBQUEsd0JBQWEsRUFBQyw4Q0FBOEMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBRUQsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFhLENBQUM7SUFDL0MsTUFBTSxjQUFjLEdBQUc7UUFDckIsRUFBRSxJQUFJLEVBQUUsaUJBQWlCLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRTtRQUM1QyxLQUFLLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUU7UUFDeEMsS0FBSyxJQUFJLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFO1FBQy9DLEVBQUUsSUFBSSxFQUFFLG9CQUFvQixFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUU7S0FDaEQsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFbEIsTUFBTSxhQUFhLEdBQUcsSUFBSSx5REFBc0IsQ0FBQztRQUMvQyxVQUFVLEVBQUUsWUFBWTtRQUN4QixRQUFRLEVBQUUsUUFBUTtRQUNsQixjQUFjLEVBQUUsY0FBcUI7UUFDckMsaUJBQWlCLEVBQUUsUUFBUTtRQUMzQixhQUFhLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFVBQVU7S0FDbkQsQ0FBQyxDQUFDO0lBRUgsTUFBTSxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBRWxDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNoQixNQUFNLE9BQU8sQ0FBQyxJQUFJLENBQ2hCLElBQUksOERBQTJCLENBQUM7WUFDOUIsVUFBVSxFQUFFLFlBQVk7WUFDeEIsUUFBUSxFQUFFLFFBQVE7WUFDbEIsUUFBUSxFQUFFLFFBQVM7WUFDbkIsU0FBUyxFQUFFLENBQUMsb0JBQW9CO1NBQ2pDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVELDhCQUE4QjtJQUM5QixNQUFNLGNBQWMsR0FBRyxJQUFJLHNEQUFtQixDQUFDO1FBQzdDLFVBQVUsRUFBRSxZQUFZO1FBQ3hCLFFBQVEsRUFBRSxRQUFRO0tBQ25CLENBQUMsQ0FBQztJQUNILE1BQU0sRUFBRSxjQUFjLEVBQUUsR0FBRyxNQUFNLE9BQU8sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDOUQsTUFBTSxNQUFNLEdBQUcsY0FBYyxFQUFFLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUM7SUFFMUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ1osT0FBTyxJQUFBLHdCQUFhLEVBQUMseUNBQXlDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUVELEtBQUssTUFBTSxNQUFNLElBQUksS0FBSyxFQUFFLENBQUM7UUFDM0IsTUFBTSxpQkFBTSxDQUFDLElBQUksQ0FDZixJQUFJLHlCQUFVLENBQUM7WUFDYixTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBaUI7WUFDeEMsSUFBSSxFQUFFO2dCQUNKLFFBQVE7Z0JBQ1IsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsTUFBTTthQUNQO1NBQ0YsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBRUQsT0FBTyxJQUFBLDBCQUFlLEVBQUMsRUFBRSxPQUFPLEVBQUUsK0JBQStCLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZFLENBQUMsQ0FBQyxDQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB3aXRoVGVuYW50Q29udGV4dCB9IGZyb20gXCJAL3NlcnZpY2VzL3V0aWxzL3dpdGhUZW5hbnRDb250ZXh0XCI7XG5pbXBvcnQgeyB3aXRoQ2FwYWJpbGl0eSB9IGZyb20gXCJAL3NlcnZpY2VzL3V0aWxzL3dpdGhDYXBhYmlsaXR5XCI7XG5pbXBvcnQgeyBDYXBhYmlsaXRpZXMgfSBmcm9tIFwiQC9zZXJ2aWNlcy9hY2Nlc3MtY29udHJvbC9jb25zdGFudHMvY2FwYWJpbGl0aWVzXCI7XG5pbXBvcnQge1xuICBzdWNjZXNzUmVzcG9uc2UsXG4gIGVycm9yUmVzcG9uc2UsXG59IGZyb20gXCJAL3NlcnZpY2VzL2F1dGgtc2VydmljZS9yZXNwb25zZVwiO1xuaW1wb3J0IHtcbiAgQ29nbml0b0lkZW50aXR5UHJvdmlkZXJDbGllbnQsXG4gIEFkbWluQ3JlYXRlVXNlckNvbW1hbmQsXG4gIEFkbWluU2V0VXNlclBhc3N3b3JkQ29tbWFuZCxcbiAgQWRtaW5HZXRVc2VyQ29tbWFuZCxcbn0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1jb2duaXRvLWlkZW50aXR5LXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBSZWdpc3RlclJlcXVlc3QgfSBmcm9tIFwiQC90eXBlcy9yZWdpc3RlclwiO1xuaW1wb3J0IHsgUHV0Q29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9saWItZHluYW1vZGJcIjtcbmltcG9ydCB7IGNsaWVudCB9IGZyb20gXCJAL3NlcnZpY2VzL3V0aWxzL2R5bmFtb2RiXCI7XG5cbmNvbnN0IGNvZ25pdG8gPSBuZXcgQ29nbml0b0lkZW50aXR5UHJvdmlkZXJDbGllbnQoe30pO1xuXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IHdpdGhUZW5hbnRDb250ZXh0KFxuICB3aXRoQ2FwYWJpbGl0eShDYXBhYmlsaXRpZXMuTUFOQUdFX1VTRVJTLCBhc3luYyAoZXZlbnQsIHsgdGVuYW50SWQgfSkgPT4ge1xuICAgIGNvbnN0IGJvZHkgPSBKU09OLnBhcnNlKGV2ZW50LmJvZHkgfHwgXCJ7fVwiKSBhcyBSZWdpc3RlclJlcXVlc3Q7XG4gICAgY29uc3Qge1xuICAgICAgdXNlcm5hbWUsXG4gICAgICBlbWFpbCxcbiAgICAgIHBob25lLFxuICAgICAgcGFzc3dvcmQsXG4gICAgICByZXF1aXJlUGFzc3dvcmRSZXNldCA9IHRydWUsXG4gICAgICBzZW5kSW52aXRlID0gZmFsc2UsXG4gICAgICByb2xlcyxcbiAgICB9ID0gYm9keTtcblxuICAgIGlmICghdXNlcm5hbWUpIHtcbiAgICAgIHJldHVybiBlcnJvclJlc3BvbnNlKFwiTWlzc2luZyByZXF1aXJlZCBmaWVsZDogdXNlcm5hbWVcIiwgNDAwKTtcbiAgICB9XG5cbiAgICBpZiAoIXNlbmRJbnZpdGUgJiYgIXBhc3N3b3JkKSB7XG4gICAgICByZXR1cm4gZXJyb3JSZXNwb25zZShcIlBhc3N3b3JkIGlzIHJlcXVpcmVkIHdoZW4gbm90IHNlbmRpbmcgaW52aXRlXCIsIDQwMCk7XG4gICAgfVxuXG4gICAgY29uc3QgVVNFUl9QT09MX0lEID0gcHJvY2Vzcy5lbnYuVVNFUl9QT09MX0lEITtcbiAgICBjb25zdCB1c2VyQXR0cmlidXRlcyA9IFtcbiAgICAgIHsgTmFtZTogXCJjdXN0b206dGVuYW50SWRcIiwgVmFsdWU6IHRlbmFudElkIH0sXG4gICAgICBlbWFpbCAmJiB7IE5hbWU6IFwiZW1haWxcIiwgVmFsdWU6IGVtYWlsIH0sXG4gICAgICBwaG9uZSAmJiB7IE5hbWU6IFwicGhvbmVfbnVtYmVyXCIsIFZhbHVlOiBwaG9uZSB9LFxuICAgICAgeyBOYW1lOiBcInByZWZlcnJlZF91c2VybmFtZVwiLCBWYWx1ZTogdXNlcm5hbWUgfSxcbiAgICBdLmZpbHRlcihCb29sZWFuKTtcblxuICAgIGNvbnN0IGNyZWF0ZUNvbW1hbmQgPSBuZXcgQWRtaW5DcmVhdGVVc2VyQ29tbWFuZCh7XG4gICAgICBVc2VyUG9vbElkOiBVU0VSX1BPT0xfSUQsXG4gICAgICBVc2VybmFtZTogdXNlcm5hbWUsXG4gICAgICBVc2VyQXR0cmlidXRlczogdXNlckF0dHJpYnV0ZXMgYXMgYW55LFxuICAgICAgVGVtcG9yYXJ5UGFzc3dvcmQ6IHBhc3N3b3JkLFxuICAgICAgTWVzc2FnZUFjdGlvbjogc2VuZEludml0ZSA/IHVuZGVmaW5lZCA6IFwiU1VQUFJFU1NcIixcbiAgICB9KTtcblxuICAgIGF3YWl0IGNvZ25pdG8uc2VuZChjcmVhdGVDb21tYW5kKTtcblxuICAgIGlmICghc2VuZEludml0ZSkge1xuICAgICAgYXdhaXQgY29nbml0by5zZW5kKFxuICAgICAgICBuZXcgQWRtaW5TZXRVc2VyUGFzc3dvcmRDb21tYW5kKHtcbiAgICAgICAgICBVc2VyUG9vbElkOiBVU0VSX1BPT0xfSUQsXG4gICAgICAgICAgVXNlcm5hbWU6IHVzZXJuYW1lLFxuICAgICAgICAgIFBhc3N3b3JkOiBwYXNzd29yZCEsXG4gICAgICAgICAgUGVybWFuZW50OiAhcmVxdWlyZVBhc3N3b3JkUmVzZXQsXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIDIuIEdldCB1c2VySWQgKENvZ25pdG8gc3ViKVxuICAgIGNvbnN0IGdldFVzZXJDb21tYW5kID0gbmV3IEFkbWluR2V0VXNlckNvbW1hbmQoe1xuICAgICAgVXNlclBvb2xJZDogVVNFUl9QT09MX0lELFxuICAgICAgVXNlcm5hbWU6IHVzZXJuYW1lLFxuICAgIH0pO1xuICAgIGNvbnN0IHsgVXNlckF0dHJpYnV0ZXMgfSA9IGF3YWl0IGNvZ25pdG8uc2VuZChnZXRVc2VyQ29tbWFuZCk7XG4gICAgY29uc3QgdXNlcklkID0gVXNlckF0dHJpYnV0ZXM/LmZpbmQoKGF0dHIpID0+IGF0dHIuTmFtZSA9PT0gXCJzdWJcIik/LlZhbHVlO1xuXG4gICAgaWYgKCF1c2VySWQpIHtcbiAgICAgIHJldHVybiBlcnJvclJlc3BvbnNlKFwiRmFpbGVkIHRvIHJldHJpZXZlIENvZ25pdG8gdXNlcklkIChzdWIpXCIsIDUwMCk7XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCByb2xlSWQgb2Ygcm9sZXMpIHtcbiAgICAgIGF3YWl0IGNsaWVudC5zZW5kKFxuICAgICAgICBuZXcgUHV0Q29tbWFuZCh7XG4gICAgICAgICAgVGFibGVOYW1lOiBwcm9jZXNzLmVudi5VU0VSX1JPTEVTX1RBQkxFISxcbiAgICAgICAgICBJdGVtOiB7XG4gICAgICAgICAgICB0ZW5hbnRJZCxcbiAgICAgICAgICAgIHVzZXJJZDogdXNlcklkLFxuICAgICAgICAgICAgcm9sZUlkLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBzdWNjZXNzUmVzcG9uc2UoeyBtZXNzYWdlOiBcIlVzZXIgcmVnaXN0ZXJlZCBzdWNjZXNzZnVsbHkuXCIgfSk7XG4gIH0pXG4pO1xuIl19