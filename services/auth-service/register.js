"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const withTenantContext_1 = require("@/services/utils/withTenantContext");
const withCapability_1 = require("@/services/utils/withCapability");
const capabilities_1 = require("@/services/access-control/constants/capabilities");
const response_1 = require("@/services/auth-service/response");
const client_cognito_identity_provider_1 = require("@aws-sdk/client-cognito-identity-provider");
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
const dynamodb_1 = require("@/services/utils/dynamodb");
const cognito = new client_cognito_identity_provider_1.CognitoIdentityProviderClient({});
exports.handler = (0, withTenantContext_1.withTenantContext)((0, withCapability_1.withCapability)(capabilities_1.Capabilities.MANAGE_USERS, async (event, { tenantId }) => {
    const body = JSON.parse(event.body || "{}");
    const { username, email, phone, password, requirePasswordReset = true, sendInvite = false, roles, } = body;
    if (!username) {
        return (0, response_1.errorResponse)("Missing required field: username", 400);
    }
    if (!sendInvite && !password) {
        return (0, response_1.errorResponse)("Password is required when not sending invite", 400);
    }
    const USER_POOL_ID = process.env.COGNITO_USER_POOL_ID;
    const userAttributes = [
        { Name: "custom:tenantId", Value: tenantId },
        email && { Name: "email", Value: email },
        phone && { Name: "phone_number", Value: phone },
        { Name: "preferred_username", Value: username },
    ].filter(Boolean);
    const createCommand = new client_cognito_identity_provider_1.AdminCreateUserCommand({
        UserPoolId: USER_POOL_ID,
        Username: username,
        UserAttributes: userAttributes,
        TemporaryPassword: password,
        MessageAction: sendInvite ? undefined : "SUPPRESS",
    });
    await cognito.send(createCommand);
    if (!sendInvite) {
        await cognito.send(new client_cognito_identity_provider_1.AdminSetUserPasswordCommand({
            UserPoolId: USER_POOL_ID,
            Username: username,
            Password: password,
            Permanent: !requirePasswordReset,
        }));
    }
    // 2. Get userId (Cognito sub)
    const getUserCommand = new client_cognito_identity_provider_1.AdminGetUserCommand({
        UserPoolId: USER_POOL_ID,
        Username: username,
    });
    const { UserAttributes } = await cognito.send(getUserCommand);
    const userId = UserAttributes?.find((attr) => attr.Name === "sub")?.Value;
    if (!userId) {
        return (0, response_1.errorResponse)("Failed to retrieve Cognito userId (sub)", 500);
    }
    for (const roleId of roles) {
        await dynamodb_1.client.send(new lib_dynamodb_1.PutCommand({
            TableName: process.env.USER_ROLES_TABLE,
            Item: {
                tenantId,
                userId: userId,
                roleId,
            },
        }));
    }
    return (0, response_1.successResponse)({ message: "User registered successfully." });
}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZWdpc3Rlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwRUFBdUU7QUFDdkUsb0VBQWlFO0FBQ2pFLG1GQUFnRjtBQUNoRiwrREFHMEM7QUFDMUMsZ0dBS21EO0FBRW5ELHdEQUFtRDtBQUNuRCx3REFBbUQ7QUFFbkQsTUFBTSxPQUFPLEdBQUcsSUFBSSxnRUFBNkIsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUV6QyxRQUFBLE9BQU8sR0FBRyxJQUFBLHFDQUFpQixFQUN0QyxJQUFBLCtCQUFjLEVBQUMsMkJBQVksQ0FBQyxZQUFZLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUU7SUFDdEUsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBb0IsQ0FBQztJQUMvRCxNQUFNLEVBQ0osUUFBUSxFQUNSLEtBQUssRUFDTCxLQUFLLEVBQ0wsUUFBUSxFQUNSLG9CQUFvQixHQUFHLElBQUksRUFDM0IsVUFBVSxHQUFHLEtBQUssRUFDbEIsS0FBSyxHQUNOLEdBQUcsSUFBSSxDQUFDO0lBRVQsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2QsT0FBTyxJQUFBLHdCQUFhLEVBQUMsa0NBQWtDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVELElBQUksQ0FBQyxVQUFVLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM3QixPQUFPLElBQUEsd0JBQWEsRUFBQyw4Q0FBOEMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBRUQsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBcUIsQ0FBQztJQUN2RCxNQUFNLGNBQWMsR0FBRztRQUNyQixFQUFFLElBQUksRUFBRSxpQkFBaUIsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFO1FBQzVDLEtBQUssSUFBSSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRTtRQUN4QyxLQUFLLElBQUksRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUU7UUFDL0MsRUFBRSxJQUFJLEVBQUUsb0JBQW9CLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRTtLQUNoRCxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUVsQixNQUFNLGFBQWEsR0FBRyxJQUFJLHlEQUFzQixDQUFDO1FBQy9DLFVBQVUsRUFBRSxZQUFZO1FBQ3hCLFFBQVEsRUFBRSxRQUFRO1FBQ2xCLGNBQWMsRUFBRSxjQUFxQjtRQUNyQyxpQkFBaUIsRUFBRSxRQUFRO1FBQzNCLGFBQWEsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsVUFBVTtLQUNuRCxDQUFDLENBQUM7SUFFSCxNQUFNLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFFbEMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2hCLE1BQU0sT0FBTyxDQUFDLElBQUksQ0FDaEIsSUFBSSw4REFBMkIsQ0FBQztZQUM5QixVQUFVLEVBQUUsWUFBWTtZQUN4QixRQUFRLEVBQUUsUUFBUTtZQUNsQixRQUFRLEVBQUUsUUFBUztZQUNuQixTQUFTLEVBQUUsQ0FBQyxvQkFBb0I7U0FDakMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBRUQsOEJBQThCO0lBQzlCLE1BQU0sY0FBYyxHQUFHLElBQUksc0RBQW1CLENBQUM7UUFDN0MsVUFBVSxFQUFFLFlBQVk7UUFDeEIsUUFBUSxFQUFFLFFBQVE7S0FDbkIsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxFQUFFLGNBQWMsRUFBRSxHQUFHLE1BQU0sT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUM5RCxNQUFNLE1BQU0sR0FBRyxjQUFjLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxFQUFFLEtBQUssQ0FBQztJQUUxRSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDWixPQUFPLElBQUEsd0JBQWEsRUFBQyx5Q0FBeUMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRUQsS0FBSyxNQUFNLE1BQU0sSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUMzQixNQUFNLGlCQUFNLENBQUMsSUFBSSxDQUNmLElBQUkseUJBQVUsQ0FBQztZQUNiLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFpQjtZQUN4QyxJQUFJLEVBQUU7Z0JBQ0osUUFBUTtnQkFDUixNQUFNLEVBQUUsTUFBTTtnQkFDZCxNQUFNO2FBQ1A7U0FDRixDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFRCxPQUFPLElBQUEsMEJBQWUsRUFBQyxFQUFFLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxDQUFDLENBQUM7QUFDdkUsQ0FBQyxDQUFDLENBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHdpdGhUZW5hbnRDb250ZXh0IH0gZnJvbSBcIkAvc2VydmljZXMvdXRpbHMvd2l0aFRlbmFudENvbnRleHRcIjtcbmltcG9ydCB7IHdpdGhDYXBhYmlsaXR5IH0gZnJvbSBcIkAvc2VydmljZXMvdXRpbHMvd2l0aENhcGFiaWxpdHlcIjtcbmltcG9ydCB7IENhcGFiaWxpdGllcyB9IGZyb20gXCJAL3NlcnZpY2VzL2FjY2Vzcy1jb250cm9sL2NvbnN0YW50cy9jYXBhYmlsaXRpZXNcIjtcbmltcG9ydCB7XG4gIHN1Y2Nlc3NSZXNwb25zZSxcbiAgZXJyb3JSZXNwb25zZSxcbn0gZnJvbSBcIkAvc2VydmljZXMvYXV0aC1zZXJ2aWNlL3Jlc3BvbnNlXCI7XG5pbXBvcnQge1xuICBDb2duaXRvSWRlbnRpdHlQcm92aWRlckNsaWVudCxcbiAgQWRtaW5DcmVhdGVVc2VyQ29tbWFuZCxcbiAgQWRtaW5TZXRVc2VyUGFzc3dvcmRDb21tYW5kLFxuICBBZG1pbkdldFVzZXJDb21tYW5kLFxufSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LWNvZ25pdG8taWRlbnRpdHktcHJvdmlkZXJcIjtcbmltcG9ydCB7IFJlZ2lzdGVyUmVxdWVzdCB9IGZyb20gXCJAL3R5cGVzL3JlZ2lzdGVyXCI7XG5pbXBvcnQgeyBQdXRDb21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL2xpYi1keW5hbW9kYlwiO1xuaW1wb3J0IHsgY2xpZW50IH0gZnJvbSBcIkAvc2VydmljZXMvdXRpbHMvZHluYW1vZGJcIjtcblxuY29uc3QgY29nbml0byA9IG5ldyBDb2duaXRvSWRlbnRpdHlQcm92aWRlckNsaWVudCh7fSk7XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gd2l0aFRlbmFudENvbnRleHQoXG4gIHdpdGhDYXBhYmlsaXR5KENhcGFiaWxpdGllcy5NQU5BR0VfVVNFUlMsIGFzeW5jIChldmVudCwgeyB0ZW5hbnRJZCB9KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IEpTT04ucGFyc2UoZXZlbnQuYm9keSB8fCBcInt9XCIpIGFzIFJlZ2lzdGVyUmVxdWVzdDtcbiAgICBjb25zdCB7XG4gICAgICB1c2VybmFtZSxcbiAgICAgIGVtYWlsLFxuICAgICAgcGhvbmUsXG4gICAgICBwYXNzd29yZCxcbiAgICAgIHJlcXVpcmVQYXNzd29yZFJlc2V0ID0gdHJ1ZSxcbiAgICAgIHNlbmRJbnZpdGUgPSBmYWxzZSxcbiAgICAgIHJvbGVzLFxuICAgIH0gPSBib2R5O1xuXG4gICAgaWYgKCF1c2VybmFtZSkge1xuICAgICAgcmV0dXJuIGVycm9yUmVzcG9uc2UoXCJNaXNzaW5nIHJlcXVpcmVkIGZpZWxkOiB1c2VybmFtZVwiLCA0MDApO1xuICAgIH1cblxuICAgIGlmICghc2VuZEludml0ZSAmJiAhcGFzc3dvcmQpIHtcbiAgICAgIHJldHVybiBlcnJvclJlc3BvbnNlKFwiUGFzc3dvcmQgaXMgcmVxdWlyZWQgd2hlbiBub3Qgc2VuZGluZyBpbnZpdGVcIiwgNDAwKTtcbiAgICB9XG5cbiAgICBjb25zdCBVU0VSX1BPT0xfSUQgPSBwcm9jZXNzLmVudi5DT0dOSVRPX1VTRVJfUE9PTF9JRCE7XG4gICAgY29uc3QgdXNlckF0dHJpYnV0ZXMgPSBbXG4gICAgICB7IE5hbWU6IFwiY3VzdG9tOnRlbmFudElkXCIsIFZhbHVlOiB0ZW5hbnRJZCB9LFxuICAgICAgZW1haWwgJiYgeyBOYW1lOiBcImVtYWlsXCIsIFZhbHVlOiBlbWFpbCB9LFxuICAgICAgcGhvbmUgJiYgeyBOYW1lOiBcInBob25lX251bWJlclwiLCBWYWx1ZTogcGhvbmUgfSxcbiAgICAgIHsgTmFtZTogXCJwcmVmZXJyZWRfdXNlcm5hbWVcIiwgVmFsdWU6IHVzZXJuYW1lIH0sXG4gICAgXS5maWx0ZXIoQm9vbGVhbik7XG5cbiAgICBjb25zdCBjcmVhdGVDb21tYW5kID0gbmV3IEFkbWluQ3JlYXRlVXNlckNvbW1hbmQoe1xuICAgICAgVXNlclBvb2xJZDogVVNFUl9QT09MX0lELFxuICAgICAgVXNlcm5hbWU6IHVzZXJuYW1lLFxuICAgICAgVXNlckF0dHJpYnV0ZXM6IHVzZXJBdHRyaWJ1dGVzIGFzIGFueSxcbiAgICAgIFRlbXBvcmFyeVBhc3N3b3JkOiBwYXNzd29yZCxcbiAgICAgIE1lc3NhZ2VBY3Rpb246IHNlbmRJbnZpdGUgPyB1bmRlZmluZWQgOiBcIlNVUFBSRVNTXCIsXG4gICAgfSk7XG5cbiAgICBhd2FpdCBjb2duaXRvLnNlbmQoY3JlYXRlQ29tbWFuZCk7XG5cbiAgICBpZiAoIXNlbmRJbnZpdGUpIHtcbiAgICAgIGF3YWl0IGNvZ25pdG8uc2VuZChcbiAgICAgICAgbmV3IEFkbWluU2V0VXNlclBhc3N3b3JkQ29tbWFuZCh7XG4gICAgICAgICAgVXNlclBvb2xJZDogVVNFUl9QT09MX0lELFxuICAgICAgICAgIFVzZXJuYW1lOiB1c2VybmFtZSxcbiAgICAgICAgICBQYXNzd29yZDogcGFzc3dvcmQhLFxuICAgICAgICAgIFBlcm1hbmVudDogIXJlcXVpcmVQYXNzd29yZFJlc2V0LFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyAyLiBHZXQgdXNlcklkIChDb2duaXRvIHN1YilcbiAgICBjb25zdCBnZXRVc2VyQ29tbWFuZCA9IG5ldyBBZG1pbkdldFVzZXJDb21tYW5kKHtcbiAgICAgIFVzZXJQb29sSWQ6IFVTRVJfUE9PTF9JRCxcbiAgICAgIFVzZXJuYW1lOiB1c2VybmFtZSxcbiAgICB9KTtcbiAgICBjb25zdCB7IFVzZXJBdHRyaWJ1dGVzIH0gPSBhd2FpdCBjb2duaXRvLnNlbmQoZ2V0VXNlckNvbW1hbmQpO1xuICAgIGNvbnN0IHVzZXJJZCA9IFVzZXJBdHRyaWJ1dGVzPy5maW5kKChhdHRyKSA9PiBhdHRyLk5hbWUgPT09IFwic3ViXCIpPy5WYWx1ZTtcblxuICAgIGlmICghdXNlcklkKSB7XG4gICAgICByZXR1cm4gZXJyb3JSZXNwb25zZShcIkZhaWxlZCB0byByZXRyaWV2ZSBDb2duaXRvIHVzZXJJZCAoc3ViKVwiLCA1MDApO1xuICAgIH1cblxuICAgIGZvciAoY29uc3Qgcm9sZUlkIG9mIHJvbGVzKSB7XG4gICAgICBhd2FpdCBjbGllbnQuc2VuZChcbiAgICAgICAgbmV3IFB1dENvbW1hbmQoe1xuICAgICAgICAgIFRhYmxlTmFtZTogcHJvY2Vzcy5lbnYuVVNFUl9ST0xFU19UQUJMRSEsXG4gICAgICAgICAgSXRlbToge1xuICAgICAgICAgICAgdGVuYW50SWQsXG4gICAgICAgICAgICB1c2VySWQ6IHVzZXJJZCxcbiAgICAgICAgICAgIHJvbGVJZCxcbiAgICAgICAgICB9LFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3VjY2Vzc1Jlc3BvbnNlKHsgbWVzc2FnZTogXCJVc2VyIHJlZ2lzdGVyZWQgc3VjY2Vzc2Z1bGx5LlwiIH0pO1xuICB9KVxuKTtcbiJdfQ==