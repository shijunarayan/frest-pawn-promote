"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_cognito_identity_provider_1 = require("@aws-sdk/client-cognito-identity-provider");
const response_1 = require("./response");
const cors_1 = require("./utils/cors");
const client = new client_cognito_identity_provider_1.CognitoIdentityProviderClient({});
const handler = async (event) => {
    const allowOrigin = (0, cors_1.getAllowOrigin)(event);
    try {
        const { username, password, email, phone, requirePasswordReset, sendInvite, } = JSON.parse(event.body || "{}");
        const userAttributes = [
            ...(email ? [{ Name: "email", Value: email }] : []),
            ...(phone ? [{ Name: "phone_number", Value: phone }] : []),
        ];
        const createCommand = new client_cognito_identity_provider_1.AdminCreateUserCommand({
            UserPoolId: process.env.USER_POOL_ID,
            Username: username,
            MessageAction: sendInvite ? undefined : "SUPPRESS",
            UserAttributes: userAttributes,
        });
        await client.send(createCommand);
        if (!sendInvite) {
            const passwordCommand = new client_cognito_identity_provider_1.AdminSetUserPasswordCommand({
                UserPoolId: process.env.USER_POOL_ID,
                Username: username,
                Password: password,
                Permanent: !requirePasswordReset,
            });
            await client.send(passwordCommand);
        }
        return (0, response_1.successResponse)({ message: "User created successfully" }, allowOrigin, 201);
    }
    catch (err) {
        console.error("Register error:", err);
        return (0, response_1.errorResponse)(err, allowOrigin);
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZWdpc3Rlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxnR0FJbUQ7QUFDbkQseUNBQTREO0FBQzVELHVDQUE4QztBQUU5QyxNQUFNLE1BQU0sR0FBRyxJQUFJLGdFQUE2QixDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRTlDLE1BQU0sT0FBTyxHQUEyQixLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUU7SUFDN0QsTUFBTSxXQUFXLEdBQUcsSUFBQSxxQkFBYyxFQUFDLEtBQUssQ0FBQyxDQUFDO0lBRTFDLElBQUksQ0FBQztRQUNILE1BQU0sRUFDSixRQUFRLEVBQ1IsUUFBUSxFQUNSLEtBQUssRUFDTCxLQUFLLEVBQ0wsb0JBQW9CLEVBQ3BCLFVBQVUsR0FDWCxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQztRQUVuQyxNQUFNLGNBQWMsR0FBRztZQUNyQixHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ25ELEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7U0FDM0QsQ0FBQztRQUVGLE1BQU0sYUFBYSxHQUFHLElBQUkseURBQXNCLENBQUM7WUFDL0MsVUFBVSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBYTtZQUNyQyxRQUFRLEVBQUUsUUFBUTtZQUNsQixhQUFhLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFVBQVU7WUFDbEQsY0FBYyxFQUFFLGNBQWM7U0FDL0IsQ0FBQyxDQUFDO1FBRUgsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRWpDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUNoQixNQUFNLGVBQWUsR0FBRyxJQUFJLDhEQUEyQixDQUFDO2dCQUN0RCxVQUFVLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFhO2dCQUNyQyxRQUFRLEVBQUUsUUFBUTtnQkFDbEIsUUFBUSxFQUFFLFFBQVE7Z0JBQ2xCLFNBQVMsRUFBRSxDQUFDLG9CQUFvQjthQUNqQyxDQUFDLENBQUM7WUFFSCxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDckMsQ0FBQztRQUVELE9BQU8sSUFBQSwwQkFBZSxFQUNwQixFQUFFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxFQUN4QyxXQUFXLEVBQ1gsR0FBRyxDQUNKLENBQUM7SUFDSixDQUFDO0lBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDdEMsT0FBTyxJQUFBLHdCQUFhLEVBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7QUFDSCxDQUFDLENBQUM7QUEvQ1csUUFBQSxPQUFPLFdBK0NsQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFQSUdhdGV3YXlQcm94eUhhbmRsZXIgfSBmcm9tIFwiYXdzLWxhbWJkYVwiO1xuaW1wb3J0IHtcbiAgQ29nbml0b0lkZW50aXR5UHJvdmlkZXJDbGllbnQsXG4gIEFkbWluQ3JlYXRlVXNlckNvbW1hbmQsXG4gIEFkbWluU2V0VXNlclBhc3N3b3JkQ29tbWFuZCxcbn0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1jb2duaXRvLWlkZW50aXR5LXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBzdWNjZXNzUmVzcG9uc2UsIGVycm9yUmVzcG9uc2UgfSBmcm9tIFwiLi9yZXNwb25zZVwiO1xuaW1wb3J0IHsgZ2V0QWxsb3dPcmlnaW4gfSBmcm9tIFwiLi91dGlscy9jb3JzXCI7XG5cbmNvbnN0IGNsaWVudCA9IG5ldyBDb2duaXRvSWRlbnRpdHlQcm92aWRlckNsaWVudCh7fSk7XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVyOiBBUElHYXRld2F5UHJveHlIYW5kbGVyID0gYXN5bmMgKGV2ZW50KSA9PiB7XG4gIGNvbnN0IGFsbG93T3JpZ2luID0gZ2V0QWxsb3dPcmlnaW4oZXZlbnQpO1xuXG4gIHRyeSB7XG4gICAgY29uc3Qge1xuICAgICAgdXNlcm5hbWUsXG4gICAgICBwYXNzd29yZCxcbiAgICAgIGVtYWlsLFxuICAgICAgcGhvbmUsXG4gICAgICByZXF1aXJlUGFzc3dvcmRSZXNldCxcbiAgICAgIHNlbmRJbnZpdGUsXG4gICAgfSA9IEpTT04ucGFyc2UoZXZlbnQuYm9keSB8fCBcInt9XCIpO1xuXG4gICAgY29uc3QgdXNlckF0dHJpYnV0ZXMgPSBbXG4gICAgICAuLi4oZW1haWwgPyBbeyBOYW1lOiBcImVtYWlsXCIsIFZhbHVlOiBlbWFpbCB9XSA6IFtdKSxcbiAgICAgIC4uLihwaG9uZSA/IFt7IE5hbWU6IFwicGhvbmVfbnVtYmVyXCIsIFZhbHVlOiBwaG9uZSB9XSA6IFtdKSxcbiAgICBdO1xuXG4gICAgY29uc3QgY3JlYXRlQ29tbWFuZCA9IG5ldyBBZG1pbkNyZWF0ZVVzZXJDb21tYW5kKHtcbiAgICAgIFVzZXJQb29sSWQ6IHByb2Nlc3MuZW52LlVTRVJfUE9PTF9JRCEsXG4gICAgICBVc2VybmFtZTogdXNlcm5hbWUsXG4gICAgICBNZXNzYWdlQWN0aW9uOiBzZW5kSW52aXRlID8gdW5kZWZpbmVkIDogXCJTVVBQUkVTU1wiLFxuICAgICAgVXNlckF0dHJpYnV0ZXM6IHVzZXJBdHRyaWJ1dGVzLFxuICAgIH0pO1xuXG4gICAgYXdhaXQgY2xpZW50LnNlbmQoY3JlYXRlQ29tbWFuZCk7XG5cbiAgICBpZiAoIXNlbmRJbnZpdGUpIHtcbiAgICAgIGNvbnN0IHBhc3N3b3JkQ29tbWFuZCA9IG5ldyBBZG1pblNldFVzZXJQYXNzd29yZENvbW1hbmQoe1xuICAgICAgICBVc2VyUG9vbElkOiBwcm9jZXNzLmVudi5VU0VSX1BPT0xfSUQhLFxuICAgICAgICBVc2VybmFtZTogdXNlcm5hbWUsXG4gICAgICAgIFBhc3N3b3JkOiBwYXNzd29yZCxcbiAgICAgICAgUGVybWFuZW50OiAhcmVxdWlyZVBhc3N3b3JkUmVzZXQsXG4gICAgICB9KTtcblxuICAgICAgYXdhaXQgY2xpZW50LnNlbmQocGFzc3dvcmRDb21tYW5kKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3VjY2Vzc1Jlc3BvbnNlKFxuICAgICAgeyBtZXNzYWdlOiBcIlVzZXIgY3JlYXRlZCBzdWNjZXNzZnVsbHlcIiB9LFxuICAgICAgYWxsb3dPcmlnaW4sXG4gICAgICAyMDFcbiAgICApO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiUmVnaXN0ZXIgZXJyb3I6XCIsIGVycik7XG4gICAgcmV0dXJuIGVycm9yUmVzcG9uc2UoZXJyLCBhbGxvd09yaWdpbik7XG4gIH1cbn07XG4iXX0=