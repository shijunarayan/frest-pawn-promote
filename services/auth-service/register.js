"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const withTenantContext_1 = require("@/services/utils/withTenantContext");
const withCapability_1 = require("@/services/utils/withCapability");
const capabilities_1 = require("@/services/access-control/constants/capabilities");
const response_1 = require("@/services/auth-service/response");
const client_cognito_identity_provider_1 = require("@aws-sdk/client-cognito-identity-provider");
const cognito = new client_cognito_identity_provider_1.CognitoIdentityProviderClient({});
exports.handler = (0, withTenantContext_1.withTenantContext)((0, withCapability_1.withCapability)(capabilities_1.Capabilities.MANAGE_USERS, async (event, { tenantId }) => {
    const body = JSON.parse(event.body || "{}");
    const { username, email, phone, password, requirePasswordReset = true, sendInvite = false, } = body;
    if (!username) {
        return (0, response_1.errorResponse)("Missing required field: username", 400);
    }
    if (!sendInvite && !password) {
        return (0, response_1.errorResponse)("Password is required when not sending invite", 400);
    }
    const USER_POOL_ID = process.env.COGNITO_USER_POOL_ID;
    const userAttributes = [
        { Name: "custom:tenantId", Value: tenantId },
        email && { Name: "email", Value: email },
        phone && { Name: "phone_number", Value: phone },
        { Name: "preferred_username", Value: username },
    ].filter(Boolean);
    const createCommand = new client_cognito_identity_provider_1.AdminCreateUserCommand({
        UserPoolId: USER_POOL_ID,
        Username: username,
        UserAttributes: userAttributes,
        TemporaryPassword: password,
        MessageAction: sendInvite ? undefined : "SUPPRESS",
    });
    await cognito.send(createCommand);
    if (!sendInvite) {
        await cognito.send(new client_cognito_identity_provider_1.AdminSetUserPasswordCommand({
            UserPoolId: USER_POOL_ID,
            Username: username,
            Password: password,
            Permanent: !requirePasswordReset,
        }));
    }
    return (0, response_1.successResponse)({ message: "User registered successfully." });
}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZWdpc3Rlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwRUFBdUU7QUFDdkUsb0VBQWlFO0FBQ2pFLG1GQUFnRjtBQUNoRiwrREFHMEM7QUFDMUMsZ0dBSW1EO0FBR25ELE1BQU0sT0FBTyxHQUFHLElBQUksZ0VBQTZCLENBQUMsRUFBRSxDQUFDLENBQUM7QUFFekMsUUFBQSxPQUFPLEdBQUcsSUFBQSxxQ0FBaUIsRUFDdEMsSUFBQSwrQkFBYyxFQUFDLDJCQUFZLENBQUMsWUFBWSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFO0lBQ3RFLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLENBQW9CLENBQUM7SUFDL0QsTUFBTSxFQUNKLFFBQVEsRUFDUixLQUFLLEVBQ0wsS0FBSyxFQUNMLFFBQVEsRUFDUixvQkFBb0IsR0FBRyxJQUFJLEVBQzNCLFVBQVUsR0FBRyxLQUFLLEdBQ25CLEdBQUcsSUFBSSxDQUFDO0lBRVQsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2QsT0FBTyxJQUFBLHdCQUFhLEVBQUMsa0NBQWtDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVELElBQUksQ0FBQyxVQUFVLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUM3QixPQUFPLElBQUEsd0JBQWEsRUFBQyw4Q0FBOEMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBRUQsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBcUIsQ0FBQztJQUN2RCxNQUFNLGNBQWMsR0FBRztRQUNyQixFQUFFLElBQUksRUFBRSxpQkFBaUIsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFO1FBQzVDLEtBQUssSUFBSSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRTtRQUN4QyxLQUFLLElBQUksRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUU7UUFDL0MsRUFBRSxJQUFJLEVBQUUsb0JBQW9CLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRTtLQUNoRCxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUVsQixNQUFNLGFBQWEsR0FBRyxJQUFJLHlEQUFzQixDQUFDO1FBQy9DLFVBQVUsRUFBRSxZQUFZO1FBQ3hCLFFBQVEsRUFBRSxRQUFRO1FBQ2xCLGNBQWMsRUFBRSxjQUFxQjtRQUNyQyxpQkFBaUIsRUFBRSxRQUFRO1FBQzNCLGFBQWEsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsVUFBVTtLQUNuRCxDQUFDLENBQUM7SUFFSCxNQUFNLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFFbEMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2hCLE1BQU0sT0FBTyxDQUFDLElBQUksQ0FDaEIsSUFBSSw4REFBMkIsQ0FBQztZQUM5QixVQUFVLEVBQUUsWUFBWTtZQUN4QixRQUFRLEVBQUUsUUFBUTtZQUNsQixRQUFRLEVBQUUsUUFBUztZQUNuQixTQUFTLEVBQUUsQ0FBQyxvQkFBb0I7U0FDakMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBRUQsT0FBTyxJQUFBLDBCQUFlLEVBQUMsRUFBRSxPQUFPLEVBQUUsK0JBQStCLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZFLENBQUMsQ0FBQyxDQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB3aXRoVGVuYW50Q29udGV4dCB9IGZyb20gXCJAL3NlcnZpY2VzL3V0aWxzL3dpdGhUZW5hbnRDb250ZXh0XCI7XG5pbXBvcnQgeyB3aXRoQ2FwYWJpbGl0eSB9IGZyb20gXCJAL3NlcnZpY2VzL3V0aWxzL3dpdGhDYXBhYmlsaXR5XCI7XG5pbXBvcnQgeyBDYXBhYmlsaXRpZXMgfSBmcm9tIFwiQC9zZXJ2aWNlcy9hY2Nlc3MtY29udHJvbC9jb25zdGFudHMvY2FwYWJpbGl0aWVzXCI7XG5pbXBvcnQge1xuICBzdWNjZXNzUmVzcG9uc2UsXG4gIGVycm9yUmVzcG9uc2UsXG59IGZyb20gXCJAL3NlcnZpY2VzL2F1dGgtc2VydmljZS9yZXNwb25zZVwiO1xuaW1wb3J0IHtcbiAgQ29nbml0b0lkZW50aXR5UHJvdmlkZXJDbGllbnQsXG4gIEFkbWluQ3JlYXRlVXNlckNvbW1hbmQsXG4gIEFkbWluU2V0VXNlclBhc3N3b3JkQ29tbWFuZCxcbn0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1jb2duaXRvLWlkZW50aXR5LXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBSZWdpc3RlclJlcXVlc3QgfSBmcm9tIFwiQC90eXBlcy9yZWdpc3RlclwiO1xuXG5jb25zdCBjb2duaXRvID0gbmV3IENvZ25pdG9JZGVudGl0eVByb3ZpZGVyQ2xpZW50KHt9KTtcblxuZXhwb3J0IGNvbnN0IGhhbmRsZXIgPSB3aXRoVGVuYW50Q29udGV4dChcbiAgd2l0aENhcGFiaWxpdHkoQ2FwYWJpbGl0aWVzLk1BTkFHRV9VU0VSUywgYXN5bmMgKGV2ZW50LCB7IHRlbmFudElkIH0pID0+IHtcbiAgICBjb25zdCBib2R5ID0gSlNPTi5wYXJzZShldmVudC5ib2R5IHx8IFwie31cIikgYXMgUmVnaXN0ZXJSZXF1ZXN0O1xuICAgIGNvbnN0IHtcbiAgICAgIHVzZXJuYW1lLFxuICAgICAgZW1haWwsXG4gICAgICBwaG9uZSxcbiAgICAgIHBhc3N3b3JkLFxuICAgICAgcmVxdWlyZVBhc3N3b3JkUmVzZXQgPSB0cnVlLFxuICAgICAgc2VuZEludml0ZSA9IGZhbHNlLFxuICAgIH0gPSBib2R5O1xuXG4gICAgaWYgKCF1c2VybmFtZSkge1xuICAgICAgcmV0dXJuIGVycm9yUmVzcG9uc2UoXCJNaXNzaW5nIHJlcXVpcmVkIGZpZWxkOiB1c2VybmFtZVwiLCA0MDApO1xuICAgIH1cblxuICAgIGlmICghc2VuZEludml0ZSAmJiAhcGFzc3dvcmQpIHtcbiAgICAgIHJldHVybiBlcnJvclJlc3BvbnNlKFwiUGFzc3dvcmQgaXMgcmVxdWlyZWQgd2hlbiBub3Qgc2VuZGluZyBpbnZpdGVcIiwgNDAwKTtcbiAgICB9XG5cbiAgICBjb25zdCBVU0VSX1BPT0xfSUQgPSBwcm9jZXNzLmVudi5DT0dOSVRPX1VTRVJfUE9PTF9JRCE7XG4gICAgY29uc3QgdXNlckF0dHJpYnV0ZXMgPSBbXG4gICAgICB7IE5hbWU6IFwiY3VzdG9tOnRlbmFudElkXCIsIFZhbHVlOiB0ZW5hbnRJZCB9LFxuICAgICAgZW1haWwgJiYgeyBOYW1lOiBcImVtYWlsXCIsIFZhbHVlOiBlbWFpbCB9LFxuICAgICAgcGhvbmUgJiYgeyBOYW1lOiBcInBob25lX251bWJlclwiLCBWYWx1ZTogcGhvbmUgfSxcbiAgICAgIHsgTmFtZTogXCJwcmVmZXJyZWRfdXNlcm5hbWVcIiwgVmFsdWU6IHVzZXJuYW1lIH0sXG4gICAgXS5maWx0ZXIoQm9vbGVhbik7XG5cbiAgICBjb25zdCBjcmVhdGVDb21tYW5kID0gbmV3IEFkbWluQ3JlYXRlVXNlckNvbW1hbmQoe1xuICAgICAgVXNlclBvb2xJZDogVVNFUl9QT09MX0lELFxuICAgICAgVXNlcm5hbWU6IHVzZXJuYW1lLFxuICAgICAgVXNlckF0dHJpYnV0ZXM6IHVzZXJBdHRyaWJ1dGVzIGFzIGFueSxcbiAgICAgIFRlbXBvcmFyeVBhc3N3b3JkOiBwYXNzd29yZCxcbiAgICAgIE1lc3NhZ2VBY3Rpb246IHNlbmRJbnZpdGUgPyB1bmRlZmluZWQgOiBcIlNVUFBSRVNTXCIsXG4gICAgfSk7XG5cbiAgICBhd2FpdCBjb2duaXRvLnNlbmQoY3JlYXRlQ29tbWFuZCk7XG5cbiAgICBpZiAoIXNlbmRJbnZpdGUpIHtcbiAgICAgIGF3YWl0IGNvZ25pdG8uc2VuZChcbiAgICAgICAgbmV3IEFkbWluU2V0VXNlclBhc3N3b3JkQ29tbWFuZCh7XG4gICAgICAgICAgVXNlclBvb2xJZDogVVNFUl9QT09MX0lELFxuICAgICAgICAgIFVzZXJuYW1lOiB1c2VybmFtZSxcbiAgICAgICAgICBQYXNzd29yZDogcGFzc3dvcmQhLFxuICAgICAgICAgIFBlcm1hbmVudDogIXJlcXVpcmVQYXNzd29yZFJlc2V0LFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3VjY2Vzc1Jlc3BvbnNlKHsgbWVzc2FnZTogXCJVc2VyIHJlZ2lzdGVyZWQgc3VjY2Vzc2Z1bGx5LlwiIH0pO1xuICB9KVxuKTtcbiJdfQ==