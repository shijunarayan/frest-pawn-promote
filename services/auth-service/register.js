"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_cognito_identity_provider_1 = require("@aws-sdk/client-cognito-identity-provider");
const client = new client_cognito_identity_provider_1.CognitoIdentityProviderClient({});
const handler = async (event) => {
    try {
        const body = JSON.parse(event.body || "{}");
        const { username, password, email, phone, requirePasswordReset = false, sendInvite = false, } = body;
        if (!username || (!sendInvite && !password)) {
            return {
                statusCode: 400,
                body: JSON.stringify({
                    error: "Username and password are required (unless sending invite).",
                }),
            };
        }
        const userAttributes = [
            ...(email ? [{ Name: "email", Value: email }] : []),
            ...(phone ? [{ Name: "phone_number", Value: phone }] : []),
        ];
        const createUserCommand = new client_cognito_identity_provider_1.AdminCreateUserCommand({
            UserPoolId: process.env.USER_POOL_ID,
            Username: username,
            MessageAction: sendInvite ? undefined : "SUPPRESS",
            UserAttributes: userAttributes,
        });
        console.log("Creating user:", { username, sendInvite });
        await client.send(createUserCommand);
        if (!sendInvite) {
            const passwordCommand = new client_cognito_identity_provider_1.AdminSetUserPasswordCommand({
                UserPoolId: process.env.USER_POOL_ID,
                Username: username,
                Password: password,
                Permanent: !requirePasswordReset,
            });
            await client.send(passwordCommand);
        }
        return {
            statusCode: 200,
            body: JSON.stringify({ message: "User created successfully" }),
        };
    }
    catch (err) {
        console.error("Register error:", JSON.stringify(err, null, 2));
        return {
            statusCode: 500,
            body: JSON.stringify({
                error: err.message || "Internal server error",
            }),
        };
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZWdpc3Rlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxnR0FJbUQ7QUFHbkQsTUFBTSxNQUFNLEdBQUcsSUFBSSxnRUFBNkIsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUU5QyxNQUFNLE9BQU8sR0FBMkIsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFO0lBQzdELElBQUksQ0FBQztRQUNILE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQztRQUU1QyxNQUFNLEVBQ0osUUFBUSxFQUNSLFFBQVEsRUFDUixLQUFLLEVBQ0wsS0FBSyxFQUNMLG9CQUFvQixHQUFHLEtBQUssRUFDNUIsVUFBVSxHQUFHLEtBQUssR0FDbkIsR0FBRyxJQUFJLENBQUM7UUFFVCxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsQ0FBQyxVQUFVLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1lBQzVDLE9BQU87Z0JBQ0wsVUFBVSxFQUFFLEdBQUc7Z0JBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7b0JBQ25CLEtBQUssRUFBRSw2REFBNkQ7aUJBQ3JFLENBQUM7YUFDSCxDQUFDO1FBQ0osQ0FBQztRQUVELE1BQU0sY0FBYyxHQUFHO1lBQ3JCLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDbkQsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztTQUMzRCxDQUFDO1FBRUYsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLHlEQUFzQixDQUFDO1lBQ25ELFVBQVUsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQWE7WUFDckMsUUFBUSxFQUFFLFFBQVE7WUFDbEIsYUFBYSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxVQUFVO1lBQ2xELGNBQWMsRUFBRSxjQUFjO1NBQy9CLENBQUMsQ0FBQztRQUVILE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztRQUN4RCxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUVyQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDaEIsTUFBTSxlQUFlLEdBQUcsSUFBSSw4REFBMkIsQ0FBQztnQkFDdEQsVUFBVSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBYTtnQkFDckMsUUFBUSxFQUFFLFFBQVE7Z0JBQ2xCLFFBQVEsRUFBRSxRQUFRO2dCQUNsQixTQUFTLEVBQUUsQ0FBQyxvQkFBb0I7YUFDakMsQ0FBQyxDQUFDO1lBRUgsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3JDLENBQUM7UUFFRCxPQUFPO1lBQ0wsVUFBVSxFQUFFLEdBQUc7WUFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxDQUFDO1NBQy9ELENBQUM7SUFDSixDQUFDO0lBQUMsT0FBTyxHQUFRLEVBQUUsQ0FBQztRQUNsQixPQUFPLENBQUMsS0FBSyxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9ELE9BQU87WUFDTCxVQUFVLEVBQUUsR0FBRztZQUNmLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO2dCQUNuQixLQUFLLEVBQUUsR0FBRyxDQUFDLE9BQU8sSUFBSSx1QkFBdUI7YUFDOUMsQ0FBQztTQUNILENBQUM7SUFDSixDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBN0RXLFFBQUEsT0FBTyxXQTZEbEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZG1pbkNyZWF0ZVVzZXJDb21tYW5kLFxuICBBZG1pblNldFVzZXJQYXNzd29yZENvbW1hbmQsXG4gIENvZ25pdG9JZGVudGl0eVByb3ZpZGVyQ2xpZW50LFxufSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LWNvZ25pdG8taWRlbnRpdHktcHJvdmlkZXJcIjtcbmltcG9ydCB7IEFQSUdhdGV3YXlQcm94eUhhbmRsZXIgfSBmcm9tIFwiYXdzLWxhbWJkYVwiO1xuXG5jb25zdCBjbGllbnQgPSBuZXcgQ29nbml0b0lkZW50aXR5UHJvdmlkZXJDbGllbnQoe30pO1xuXG5leHBvcnQgY29uc3QgaGFuZGxlcjogQVBJR2F0ZXdheVByb3h5SGFuZGxlciA9IGFzeW5jIChldmVudCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IGJvZHkgPSBKU09OLnBhcnNlKGV2ZW50LmJvZHkgfHwgXCJ7fVwiKTtcblxuICAgIGNvbnN0IHtcbiAgICAgIHVzZXJuYW1lLFxuICAgICAgcGFzc3dvcmQsXG4gICAgICBlbWFpbCxcbiAgICAgIHBob25lLFxuICAgICAgcmVxdWlyZVBhc3N3b3JkUmVzZXQgPSBmYWxzZSxcbiAgICAgIHNlbmRJbnZpdGUgPSBmYWxzZSxcbiAgICB9ID0gYm9keTtcblxuICAgIGlmICghdXNlcm5hbWUgfHwgKCFzZW5kSW52aXRlICYmICFwYXNzd29yZCkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXR1c0NvZGU6IDQwMCxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIGVycm9yOiBcIlVzZXJuYW1lIGFuZCBwYXNzd29yZCBhcmUgcmVxdWlyZWQgKHVubGVzcyBzZW5kaW5nIGludml0ZSkuXCIsXG4gICAgICAgIH0pLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdCB1c2VyQXR0cmlidXRlcyA9IFtcbiAgICAgIC4uLihlbWFpbCA/IFt7IE5hbWU6IFwiZW1haWxcIiwgVmFsdWU6IGVtYWlsIH1dIDogW10pLFxuICAgICAgLi4uKHBob25lID8gW3sgTmFtZTogXCJwaG9uZV9udW1iZXJcIiwgVmFsdWU6IHBob25lIH1dIDogW10pLFxuICAgIF07XG5cbiAgICBjb25zdCBjcmVhdGVVc2VyQ29tbWFuZCA9IG5ldyBBZG1pbkNyZWF0ZVVzZXJDb21tYW5kKHtcbiAgICAgIFVzZXJQb29sSWQ6IHByb2Nlc3MuZW52LlVTRVJfUE9PTF9JRCEsXG4gICAgICBVc2VybmFtZTogdXNlcm5hbWUsXG4gICAgICBNZXNzYWdlQWN0aW9uOiBzZW5kSW52aXRlID8gdW5kZWZpbmVkIDogXCJTVVBQUkVTU1wiLFxuICAgICAgVXNlckF0dHJpYnV0ZXM6IHVzZXJBdHRyaWJ1dGVzLFxuICAgIH0pO1xuXG4gICAgY29uc29sZS5sb2coXCJDcmVhdGluZyB1c2VyOlwiLCB7IHVzZXJuYW1lLCBzZW5kSW52aXRlIH0pO1xuICAgIGF3YWl0IGNsaWVudC5zZW5kKGNyZWF0ZVVzZXJDb21tYW5kKTtcblxuICAgIGlmICghc2VuZEludml0ZSkge1xuICAgICAgY29uc3QgcGFzc3dvcmRDb21tYW5kID0gbmV3IEFkbWluU2V0VXNlclBhc3N3b3JkQ29tbWFuZCh7XG4gICAgICAgIFVzZXJQb29sSWQ6IHByb2Nlc3MuZW52LlVTRVJfUE9PTF9JRCEsXG4gICAgICAgIFVzZXJuYW1lOiB1c2VybmFtZSxcbiAgICAgICAgUGFzc3dvcmQ6IHBhc3N3b3JkLFxuICAgICAgICBQZXJtYW5lbnQ6ICFyZXF1aXJlUGFzc3dvcmRSZXNldCxcbiAgICAgIH0pO1xuXG4gICAgICBhd2FpdCBjbGllbnQuc2VuZChwYXNzd29yZENvbW1hbmQpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IG1lc3NhZ2U6IFwiVXNlciBjcmVhdGVkIHN1Y2Nlc3NmdWxseVwiIH0pLFxuICAgIH07XG4gIH0gY2F0Y2ggKGVycjogYW55KSB7XG4gICAgY29uc29sZS5lcnJvcihcIlJlZ2lzdGVyIGVycm9yOlwiLCBKU09OLnN0cmluZ2lmeShlcnIsIG51bGwsIDIpKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhdHVzQ29kZTogNTAwLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBlcnJvcjogZXJyLm1lc3NhZ2UgfHwgXCJJbnRlcm5hbCBzZXJ2ZXIgZXJyb3JcIixcbiAgICAgIH0pLFxuICAgIH07XG4gIH1cbn07XG4iXX0=